
**********************Testing isGameOver**********************

Testing supply states and game status:
Province Supply Count: 0 Game Over (1=Yes, 0=No): Expected - 1 Actual - 1
Province Supply Count: 8 Game Over (1=Yes, 0=No): Expected - 0 Actual - 0

Testing supply states of additional cards and game status:
Province Supply Count: 8 Supply Decks Empty: 1 Game Over (1=Yes, 0=No): Expected - 0 Actual - 0
Province Supply Count: 8 Supply Decks Empty: 2 Game Over (1=Yes, 0=No): Expected - 0 Actual - 0
Province Supply Count: 8 Supply Decks Empty: 3 Game Over (1=Yes, 0=No): Expected - 1 Actual - 1

**********************ALL TESTS PASSED**********************

File 'dominion.c'
Lines executed:30.73% of 563
Creating 'dominion.c.gcov'

unittest2.c:

**********************Testing gainCard**********************

Testing supply states and response:
Testing with 0 card count in supply: PASSED

Testing with >0 card count in supply:
Testing adding card to discard of player 1: PASSED
Testing adding card to deck of player 1: PASSED
Testing adding card to hand of player 1: PASSED
Testing adding card to discard of player 2: PASSED
Testing adding card to deck of player 2: PASSED
Testing adding card to hand of player 2: PASSED

**********************ALL TESTS PASSED**********************

unittest3.c:

**********************Testing supplyCount**********************
Testing supply card counts:
Card Number: 1 Count: Expected - 0 Actual - 0.
Card Number: 2 Count: Expected - 1 Actual - 1.
Card Number: 3 Count: Expected - 2 Actual - 2.
Card Number: 4 Count: Expected - 3 Actual - 3.
Card Number: 5 Count: Expected - 4 Actual - 4.
Card Number: 6 Count: Expected - 5 Actual - 5.
Card Number: 7 Count: Expected - 6 Actual - 6.
Card Number: 8 Count: Expected - 7 Actual - 7.
Card Number: 9 Count: Expected - 8 Actual - 8.
Card Number: 10 Count: Expected - 9 Actual - 9.

**********************ALL TESTS PASSED**********************

unittest4.c:

**********************Testing handCard**********************
Player: 1 Card Position: 1 Value: Expected - 1 Actual - 1.
Player: 1 Card Position: 2 Value: Expected - 4 Actual - 4.
Player: 1 Card Position: 3 Value: Expected - 4 Actual - 4.
Player: 1 Card Position: 4 Value: Expected - 4 Actual - 4.
Player: 1 Card Position: 5 Value: Expected - 4 Actual - 4.
Player: 1 Card Position: 6 Value: Expected - 0 Actual - 0.

**********************ALL TESTS PASSED**********************

cardtest1.c:

**********************Testing Smithy**********************

Testing player states:
Player 1 State (Hand|Deck|Played|Discard): Expected - 7|2|1|0 Actual - 4|5|1|0
Player 2 State (Hand|Deck|Discard): Expected - 0|10|0 Actual - 0|10|0

Testing supply states:
Supply Card State: Expected - NO CHANGE Actual - NO CHANGE

************************TESTS FAILED************************

cardtest2.c:

**********************Testing Adventurer**********************

Testing player states:
Player 1 State (Hand|Deck|Played|Discard): Expected - 6|3|1|1 Actual - 7|2|0|0
Player 2 State (Hand|Deck|Discard): Expected - 0|10|0 Actual - 0|10|0

Testing cards gained and discarded:
Treasures Gained: Expected - 2 Actual - 2
Treasures Discarded: Expected - 0 Actual - 0

Testing supply states:
Supply Card State: Expected - NO CHANGE Actual - NO CHANGE

************************TESTS FAILED************************

cardtest3.c:

**********************Testing Cutpurse**********************

Testing player states:
Player 1 State (Hand|Deck|Played|Discard): Expected - 4|5|1|0 Actual - 4|5|1|0
Player 2 State (Hand|Deck|Discard): Expected - 0|10|0 Actual - 0|10|0

Testing coins gained and discarded:

Testing supply states:
Supply Card State: Expected - NO CHANGE Actual - NO CHANGE

**********************ALL TESTS PASSED**********************

cardtest4.c:

**********************Testing Great Hall**********************

Testing player states:
Player 1 State (Hand|Deck|Played|Discard): Expected - 5|4|1|0 Actual - 5|4|1|0
Player 2 State (Hand|Deck|Discard): Expected - 0|10|0 Actual - 0|10|0

Testing actions gained:
Actions Gained: Expected - 1 Actual - 1

Testing supply states:
Supply Card State: Expected - NO CHANGE Actual - NO CHANGE

**********************ALL TESTS PASSED**********************

Function 'playAdventurer'
Lines executed:93.75% of 16
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
Calls executed:50.00% of 2

Function 'playSmithy'
Lines executed:80.00% of 5
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:50.00% of 2

Function 'playBaron'
Lines executed:0.00% of 29
Branches executed:0.00% of 18
Taken at least once:0.00% of 18
Calls executed:0.00% of 8

Function 'playCutpurse'
Lines executed:53.85% of 13
Branches executed:50.00% of 12
Taken at least once:41.67% of 12
Calls executed:66.67% of 3

Function 'playVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:9.29% of 183
Branches executed:14.84% of 155
Taken at least once:3.23% of 155
Calls executed:11.54% of 52

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:30.73% of 563
Branches executed:30.94% of 417
Taken at least once:21.58% of 417
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:40
        -:    0:Programs:40
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1200 returned 100% blocks executed 83%
     1200:    8:int compare(const void* a, const void* b) {
     1200:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 1200
    #####:   10:    return 1;
     1200:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 320 (fallthrough)
branch  1 taken 880
      320:   12:    return -1;
      880:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 40 returned 100% blocks executed 88%
       40:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       40:   44:  SelectStream(1);
call    0 returned 40
       40:   45:  PutSeed((long)randomSeed);
call    0 returned 40
        -:   46:  
        -:   47:  //check number of players
       40:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 40 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 40
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       40:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      440:   57:  for (i = 0; i < 10; i++)
branch  0 taken 400
branch  1 taken 40 (fallthrough)
        -:   58:    {
     4400:   59:      for (j = 0; j < 10; j++)
branch  0 taken 4000
branch  1 taken 400 (fallthrough)
        -:   60:        {
     4000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 3600 (fallthrough)
branch  1 taken 400
branch  2 taken 0 (fallthrough)
branch  3 taken 3600
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       40:   73:  if (numPlayers == 2)
branch  0 taken 40 (fallthrough)
branch  1 taken 0
        -:   74:    {
       40:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       40:   87:  if (numPlayers == 2)
branch  0 taken 40 (fallthrough)
branch  1 taken 0
        -:   88:    {
       40:   89:      state->supplyCount[estate] = 8;
       40:   90:      state->supplyCount[duchy] = 8;
       40:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       40:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       40:  102:  state->supplyCount[silver] = 40;
       40:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      840:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 800
branch  1 taken 40 (fallthrough)
        -:  107:    {
     6640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 6200
branch  1 taken 440 (fallthrough)
        -:  109:	{
     6200:  110:	  if (kingdomCards[j] == i)
branch  0 taken 360 (fallthrough)
branch  1 taken 5840
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      360:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 320 (fallthrough)
branch  1 taken 40
branch  2 taken 0 (fallthrough)
branch  3 taken 320
        -:  114:		{
       80:  115:		  if (numPlayers == 2){ 
branch  0 taken 40 (fallthrough)
branch  1 taken 0
       40:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      320:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      360:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     5840:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      120:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80
branch  1 taken 40 (fallthrough)
        -:  139:    {
       80:  140:      state->deckCount[i] = 0;
      320:  141:      for (j = 0; j < 3; j++)
branch  0 taken 240
branch  1 taken 80 (fallthrough)
        -:  142:	{
      240:  143:	  state->deck[i][j] = estate;
      240:  144:	  state->deckCount[i]++;
        -:  145:	}
      640:  146:      for (j = 3; j < 10; j++)
branch  0 taken 560
branch  1 taken 80 (fallthrough)
        -:  147:	{
      560:  148:	  state->deck[i][j] = copper;
      560:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      120:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80
branch  1 taken 40 (fallthrough)
        -:  155:    {
       80:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 80
branch  1 taken 0 (fallthrough)
branch  2 taken 80
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      120:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80
branch  1 taken 40 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       80:  166:      state->handCount[i] = 0;
       80:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1120:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1080
branch  1 taken 40 (fallthrough)
        -:  177:    {
     1080:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       40:  182:  state->outpostPlayed = 0;
       40:  183:  state->phase = 0;
       40:  184:  state->numActions = 1;
       40:  185:  state->numBuys = 1;
       40:  186:  state->playedCardCount = 0;
       40:  187:  state->whoseTurn = 0;
       40:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      240:  192:  for (it = 0; it < 5; it++){
branch  0 taken 200
branch  1 taken 40 (fallthrough)
      200:  193:    drawCard(state->whoseTurn, state);
call    0 returned 200
        -:  194:  }
        -:  195:
       40:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 40
        -:  197:
       40:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 80 returned 100% blocks executed 94%
       80:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       80:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       80:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 80
    #####:  210:    return -1;
       80:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 80
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      960:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 800
branch  1 taken 80 (fallthrough)
      800:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 800
      800:  216:    newDeck[newDeckPos] = state->deck[player][card];
      800:  217:    newDeckPos++;
     2737:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 1937
branch  1 taken 800 (fallthrough)
     1937:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      800:  221:    state->deckCount[player]--;
        -:  222:  }
      880:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 800
branch  1 taken 80 (fallthrough)
      800:  224:    state->deck[player][i] = newDeck[i];
      800:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       80:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 60 returned 100% blocks executed 100%
       60:  315:int handCard(int handPos, struct gameState *state) {
       60:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 60
       60:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 140 returned 100% blocks executed 100%
      140:  320:int supplyCount(int card, struct gameState *state) {
      140:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 80 returned 100% blocks executed 100%
       80:  346:int whoseTurn(struct gameState *state) {
       80:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 50 returned 100% blocks executed 100%
       50:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       50:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 10 (fallthrough)
branch  1 taken 40
        -:  396:    {
       10:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       40:  401:  j = 0;
     1040:  402:  for (i = 0; i < 25; i++)
branch  0 taken 1000
branch  1 taken 40 (fallthrough)
        -:  403:    {
     1000:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 60 (fallthrough)
branch  1 taken 940
        -:  405:	{
       60:  406:	  j++;
        -:  407:	}
        -:  408:    }
       40:  409:  if ( j >= 3)
branch  0 taken 10 (fallthrough)
branch  1 taken 30
        -:  410:    {
       10:  411:      return 1;
        -:  412:    }
        -:  413:
       30:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 221 returned 100% blocks executed 38%
      221:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      221:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 221
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      221:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      221:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      221:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      221:  576:    state->deckCount[player]--;
      221:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      221:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 20 returned 100% blocks executed 7%
       20:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  // int k;
        -:  651:  int x;
        -:  652:  int index;
       20:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 20
       20:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       20:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  // int drawntreasure=0;
        -:  659:  // int cardDrawn;
       20:  660:  int z = 0;// this is the counter for the temp hand
       20:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       20:  667:  switch( card ) 
branch  0 taken 5
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 5
branch  7 taken 0
branch  8 taken 0
branch  9 taken 5
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 5
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
        5:  670:      playAdventurer(state, currentPlayer, temphand, z);
call    0 returned 5
        -:  671:  //     while(drawntreasure<2){
        -:  672:	// if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  673:	//   shuffle(currentPlayer, state);
        -:  674:	// }
        -:  675:	// drawCard(currentPlayer, state);
        -:  676:	// cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  677:	// if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  678:	//   drawntreasure++;
        -:  679:	// else{
        -:  680:	//   temphand[z]=cardDrawn;
        -:  681:	//   state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  682:	//   z++;
        -:  683:	// }
        -:  684:  //     }
        -:  685:  //     while(z-1>=0){
        -:  686:	// state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  687:	// z=z-1;
        -:  688:  //     }
        5:  689:      return 0;
        -:  690:			
        -:  691:    case council_room:
        -:  692:      //+4 Cards
    #####:  693:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  696:	}
        -:  697:			
        -:  698:      //+1 Buy
    #####:  699:      state->numBuys++;
        -:  700:			
        -:  701:      //Each other player draws a card
    #####:  702:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  703:	{
    #####:  704:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  705:	    {
    #####:  706:	      drawCard(i, state);
call    0 never executed
        -:  707:	    }
        -:  708:	}
        -:  709:			
        -:  710:      //put played card in played card pile
    #####:  711:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  712:			
    #####:  713:      return 0;
        -:  714:			
        -:  715:    case feast:
        -:  716:      //gain card with cost up to 5
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  719:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  721:      }
        -:  722:      //Backup hand
        -:  723:
        -:  724:      //Update Coins for Buy
    #####:  725:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  726:      x = 1;//Condition to loop on
    #####:  727:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  728:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  729:	  if (DEBUG)
        -:  730:	    printf("None of that card left, sorry!\n");
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  734:	  }
        -:  735:	}
    #####:  736:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  737:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  741:	  }
        -:  742:	}
        -:  743:	else{
        -:  744:
        -:  745:	  if (DEBUG){
        -:  746:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:	  }
        -:  748:
    #####:  749:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  750:	  x = 0;//No more buying cards
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
        -:  756:	}
        -:  757:      }     
        -:  758:
        -:  759:      //Reset Hand
    #####:  760:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  761:	state->hand[currentPlayer][i] = temphand[i];
    #####:  762:	temphand[i] = -1;
        -:  763:      }
        -:  764:      //Reset Hand
        -:  765:      			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case gardens:
    #####:  769:      return -1;
        -:  770:			
        -:  771:    case mine:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:		
    #####:  779:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:
    #####:  784:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  790:
        -:  791:      //discard card from hand
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  793:
        -:  794:      //discard trashed card
    #####:  795:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  798:	    {
    #####:  799:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  800:	      break;
        -:  801:	    }
        -:  802:	}
        -:  803:			
    #####:  804:      return 0;
        -:  805:			
        -:  806:    case remodel:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:
    #####:  814:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  815:
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  818:
        -:  819:      //discard trashed card
    #####:  820:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  823:	    {
    #####:  824:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  825:	      break;
        -:  826:	    }
        -:  827:	}
        -:  828:
        -:  829:
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case smithy:
        5:  833:      playSmithy(state, currentPlayer, handPos);
call    0 returned 5
        -:  834:  //     //+3 Cards
        -:  835:  //     for (i = 0; i < 3; i++)
        -:  836:	// {
        -:  837:	//   drawCard(currentPlayer, state);
        -:  838:	// }
        -:  839:			
        -:  840:  //     //discard card from hand
        -:  841:  //     discardCard(handPos, currentPlayer, state, 0);
        5:  842:      return 0;
        -:  843:		
        -:  844:    case village:
    #####:  845:      playVillage(state, currentPlayer, handPos);
call    0 never executed
        -:  846:      // //+1 Card
        -:  847:      // drawCard(currentPlayer, state);
        -:  848:			
        -:  849:      // //+2 Actions
        -:  850:      // state->numActions = state->numActions + 2;
        -:  851:			
        -:  852:      // //discard played card from hand
        -:  853:      // discardCard(handPos, currentPlayer, state, 0);
    #####:  854:      return 0;
        -:  855:		
        -:  856:    case baron:
    #####:  857:      playBaron(state, currentPlayer, choice1);
call    0 never executed
        -:  858:  //     state->numBuys++;//Increase buys by 1!
        -:  859:  //     if (choice1 > 0){//Boolean true or going to discard an estate
        -:  860:	// int p = 0;//Iterator for hand!
        -:  861:	// int card_not_discarded = 1;//Flag for discard set!
        -:  862:	// while(card_not_discarded){
        -:  863:	//   if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  864:	//     state->coins += 4;//Add 4 coins to the amount of coins
        -:  865:	//     state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  866:	//     state->discardCount[currentPlayer]++;
        -:  867:	//     for (;p < state->handCount[currentPlayer]; p++){
        -:  868:	//       state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  869:	//     }
        -:  870:	//     state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  871:	//     state->handCount[currentPlayer]--;
        -:  872:	//     card_not_discarded = 0;//Exit the loop
        -:  873:	//   }
        -:  874:	//   else if (p > state->handCount[currentPlayer]){
        -:  875:	//     if(DEBUG) {
        -:  876:	//       printf("No estate cards in your hand, invalid choice\n");
        -:  877:	//       printf("Must gain an estate if there are any\n");
        -:  878:	//     }
        -:  879:	//     if (supplyCount(estate, state) > 0){
        -:  880:	//       gainCard(estate, state, 0, currentPlayer);
        -:  881:	//       state->supplyCount[estate]--;//Decrement estates
        -:  882:	//       if (supplyCount(estate, state) == 0){
        -:  883:	// 	isGameOver(state);
        -:  884:	//       }
        -:  885:	//     }
        -:  886:	//     card_not_discarded = 0;//Exit the loop
        -:  887:	//   }
        -:  888:			    
        -:  889:	//   else{
        -:  890:	//     p++;//Next card
        -:  891:	//   }
        -:  892:	// }
        -:  893:  //     }
        -:  894:			    
        -:  895:  //     else{
        -:  896:	// if (supplyCount(estate, state) > 0){
        -:  897:	//   gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  898:	//   state->supplyCount[estate]--;//Decrement Estates
        -:  899:	//   if (supplyCount(estate, state) == 0){
        -:  900:	//     isGameOver(state);
        -:  901:	//   }
        -:  902:	// }
        -:  903:  //     }
        -:  904:	    
        -:  905:      
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case great_hall:
        -:  909:      //+1 Card
        5:  910:      drawCard(currentPlayer, state);
call    0 returned 5
        -:  911:			
        -:  912:      //+1 Actions
        5:  913:      state->numActions++;
        -:  914:			
        -:  915:      //discard card from hand
        5:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 5
        5:  917:      return 0;
        -:  918:		
        -:  919:    case minion:
        -:  920:      //+1 action
    #####:  921:      state->numActions++;
        -:  922:			
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  925:			
    #####:  926:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  927:	{
    #####:  928:	  state->coins = state->coins + 2;
        -:  929:	}
        -:  930:			
    #####:  931:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  932:	{
        -:  933:	  //discard hand
    #####:  934:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  935:	    {
    #####:  936:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  937:	    }
        -:  938:				
        -:  939:	  //draw 4
    #####:  940:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  941:	    {
    #####:  942:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  943:	    }
        -:  944:				
        -:  945:	  //other players discard hand and redraw if hand size > 4
    #####:  946:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  949:		{
    #####:  950:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  951:		    {
        -:  952:		      //discard hand
    #####:  953:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  954:			{
    #####:  955:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  956:			}
        -:  957:							
        -:  958:		      //draw 4
    #####:  959:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  960:			{
    #####:  961:			  drawCard(i, state);
call    0 never executed
        -:  962:			}
        -:  963:		    }
        -:  964:		}
        -:  965:	    }
        -:  966:				
        -:  967:	}
    #####:  968:      return 0;
        -:  969:		
        -:  970:    case steward:
    #####:  971:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  972:	{
        -:  973:	  //+2 cards
    #####:  974:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  975:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  976:	}
    #####:  977:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  978:	{
        -:  979:	  //+2 coins
    #####:  980:	  state->coins = state->coins + 2;
        -:  981:	}
        -:  982:      else
        -:  983:	{
        -:  984:	  //trash 2 cards in hand
    #####:  985:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  986:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  987:	}
        -:  988:			
        -:  989:      //discard card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case tribute:
    #####:  994:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  995:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  997:	  state->deckCount[nextPlayer]--;
        -:  998:	}
    #####:  999:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1000:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1001:	  state->discardCount[nextPlayer]--;
        -: 1002:	}
        -: 1003:	else{
        -: 1004:	  //No Card to Reveal
        -: 1005:	  if (DEBUG){
        -: 1006:	    printf("No cards to reveal\n");
        -: 1007:	  }
        -: 1008:	}
        -: 1009:      }
        -: 1010:	    
        -: 1011:      else{
    #####: 1012:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1013:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1014:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1015:	    state->deckCount[nextPlayer]++;
    #####: 1016:	    state->discard[nextPlayer][i] = -1;
    #####: 1017:	    state->discardCount[nextPlayer]--;
        -: 1018:	  }
        -: 1019:			    
    #####: 1020:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1021:	} 
    #####: 1022:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1024:	state->deckCount[nextPlayer]--;
    #####: 1025:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
        -: 1028:      }    
        -: 1029:		       
    #####: 1030:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1031:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1032:	state->playedCardCount++;
    #####: 1033:	tributeRevealedCards[1] = -1;
        -: 1034:      }
        -: 1035:
    #####: 1036:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1037:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1038:	  state->coins += 2;
        -: 1039:	}
        -: 1040:		    
    #####: 1041:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1042:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1043:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:	}
        -: 1045:	else{//Action Card
    #####: 1046:	  state->numActions = state->numActions + 2;
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case ambassador:
    #####: 1053:      j = 0;		//used to check if player has enough cards to discard
        -: 1054:
    #####: 1055:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1056:	{
    #####: 1057:	  return -1;				
        -: 1058:	}
        -: 1059:
    #####: 1060:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:
    #####: 1065:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1068:	    {
    #####: 1069:	      j++;
        -: 1070:	    }
        -: 1071:	}
    #####: 1072:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1073:	{
    #####: 1074:	  return -1;				
        -: 1075:	}
        -: 1076:
        -: 1077:      if (DEBUG) 
        -: 1078:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1079:
        -: 1080:      //increase supply count for choosen card by amount being discarded
    #####: 1081:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1082:			
        -: 1083:      //each other player gains a copy of revealed card
    #####: 1084:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1087:	    {
    #####: 1088:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1089:	    }
        -: 1090:	}
        -: 1091:
        -: 1092:      //discard played card from hand
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1094:
        -: 1095:      //trash copies of cards returned to supply
    #####: 1096:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1099:	    {
    #####: 1100:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1101:		{
    #####: 1102:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1103:		  break;
        -: 1104:		}
        -: 1105:	    }
        -: 1106:	}			
        -: 1107:
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case cutpurse:
        5: 1111:      playCutpurse(state, currentPlayer, handPos);
call    0 returned 5
        -: 1112:
        -: 1113:  //     updateCoins(currentPlayer, state, 2);
        -: 1114:  //     for (i = 0; i < state->numPlayers; i++)
        -: 1115:	// {
        -: 1116:	//   if (i != currentPlayer)
        -: 1117:	//     {
        -: 1118:	//       for (j = 0; j < state->handCount[i]; j++)
        -: 1119:	// 	{
        -: 1120:	// 	  if (state->hand[i][j] == copper)
        -: 1121:	// 	    {
        -: 1122:	// 	      discardCard(j, i, state, 0);
        -: 1123:	// 	      break;
        -: 1124:	// 	    }
        -: 1125:	// 	  if (j == state->handCount[i])
        -: 1126:	// 	    {
        -: 1127:	// 	      for (k = 0; k < state->handCount[i]; k++)
        -: 1128:	// 		{
        -: 1129:	// 		  if (DEBUG)
        -: 1130:	// 		    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1131:	// 		}	
        -: 1132:	// 	      break;
        -: 1133:	// 	    }		
        -: 1134:	// 	}
        -: 1135:					
        -: 1136:	//     }
        -: 1137:				
        -: 1138:	// }				
        -: 1139:
        -: 1140:  //     //discard played card from hand
        -: 1141:  //     discardCard(handPos, currentPlayer, state, 0);			
        -: 1142:
        5: 1143:      return 0;
        -: 1144:
        -: 1145:		
        -: 1146:    case embargo: 
        -: 1147:      //+2 Coins
    #####: 1148:      state->coins = state->coins + 2;
        -: 1149:			
        -: 1150:      //see if selected pile is in play
    #####: 1151:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  return -1;
        -: 1154:	}
        -: 1155:			
        -: 1156:      //add embargo token to selected supply pile
    #####: 1157:      state->embargoTokens[choice1]++;
        -: 1158:			
        -: 1159:      //trash card
    #####: 1160:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case outpost:
        -: 1164:      //set outpost flag
    #####: 1165:      state->outpostPlayed++;
        -: 1166:			
        -: 1167:      //discard card
    #####: 1168:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1169:      return 0;
        -: 1170:		
        -: 1171:    case salvager:
        -: 1172:      //+1 buy
    #####: 1173:      state->numBuys++;
        -: 1174:			
    #####: 1175:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1176:	{
        -: 1177:	  //gain coins equal to trashed card
    #####: 1178:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1179:	  //trash card
    #####: 1180:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1181:	}
        -: 1182:			
        -: 1183:      //discard card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case sea_hag:
    #####: 1188:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1189:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1190:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1191:	  state->discardCount[i]++;
    #####: 1192:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1193:	}
        -: 1194:      }
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case treasure_map:
        -: 1198:      //search hand for another treasure_map
    #####: 1199:      index = -1;
    #####: 1200:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
    #####: 1202:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1203:	    {
    #####: 1204:	      index = i;
    #####: 1205:	      break;
        -: 1206:	    }
        -: 1207:	}
    #####: 1208:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1209:	{
        -: 1210:	  //trash both treasure cards
    #####: 1211:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1212:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1213:
        -: 1214:	  //gain 4 Gold cards
    #####: 1215:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	    {
    #####: 1217:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1218:	    }
        -: 1219:				
        -: 1220:	  //return success
    #####: 1221:	  return 1;
        -: 1222:	}
        -: 1223:			
        -: 1224:      //no second treasure_map found in hand
    #####: 1225:      return -1;
        -: 1226:    }
        -: 1227:	
    #####: 1228:  return -1;
        -: 1229:}
        -: 1230:
function discardCard called 15 returned 100% blocks executed 78%
       15: 1231:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1232:{
        -: 1233:	
        -: 1234:  //if card is not trashed, added to Played pile 
       15: 1235:  if (trashFlag < 1)
branch  0 taken 15 (fallthrough)
branch  1 taken 0
        -: 1236:    {
        -: 1237:      //add card to played pile
       15: 1238:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1239:      state->playedCardCount++;
        -: 1240:    }
        -: 1241:	
        -: 1242:  //set played card to -1
       15: 1243:  state->hand[currentPlayer][handPos] = -1;
        -: 1244:	
        -: 1245:  //remove card from player's hand
       15: 1246:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
       15: 1251:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        -: 1252:    {
        -: 1253:      //reduce number of cards in hand
    #####: 1254:      state->handCount[currentPlayer]--;
        -: 1255:    }
        -: 1256:  else 	
        -: 1257:    {
        -: 1258:      //replace discarded card with last card in hand
       15: 1259:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1260:      //set last card to -1
       15: 1261:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1262:      //reduce number of cards in hand
       15: 1263:      state->handCount[currentPlayer]--;
        -: 1264:    }
        -: 1265:	
       15: 1266:  return 0;
        -: 1267:}
        -: 1268:
function gainCard called 40 returned 100% blocks executed 100%
       40: 1269:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1270:{
        -: 1271:  //Note: supplyPos is enum of choosen card
        -: 1272:	
        -: 1273:  //check if supply pile is empty (0) or card is not used in game (-1)
       40: 1274:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 40
branch  1 taken 10 (fallthrough)
branch  2 taken 30
        -: 1275:    {
       10: 1276:      return -1;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //added card for [whoseTurn] current player:
        -: 1280:  // toFlag = 0 : add to discard
        -: 1281:  // toFlag = 1 : add to deck
        -: 1282:  // toFlag = 2 : add to hand
        -: 1283:
       30: 1284:  if (toFlag == 1)
branch  0 taken 10 (fallthrough)
branch  1 taken 20
        -: 1285:    {
       10: 1286:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       10: 1287:      state->deckCount[player]++;
        -: 1288:    }
       20: 1289:  else if (toFlag == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 10
        -: 1290:    {
       10: 1291:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       10: 1292:      state->handCount[player]++;
        -: 1293:    }
        -: 1294:  else
        -: 1295:    {
       10: 1296:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       10: 1297:      state->discardCount[player]++;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //decrease number in supply pile
       30: 1301:  state->supplyCount[supplyPos]--;
        -: 1302:	 
       30: 1303:  return 0;
        -: 1304:}
        -: 1305:
function updateCoins called 45 returned 100% blocks executed 82%
       45: 1306:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1307:{
        -: 1308:  int i;
        -: 1309:	
        -: 1310:  //reset coin count
       45: 1311:  state->coins = 0;
        -: 1312:
        -: 1313:  //add coins for each Treasure card in player's hand
      270: 1314:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 225
branch  1 taken 45 (fallthrough)
        -: 1315:    {
      225: 1316:      if (state->hand[player][i] == copper)
branch  0 taken 187 (fallthrough)
branch  1 taken 38
        -: 1317:	{
      187: 1318:	  state->coins += 1;
        -: 1319:	}
       38: 1320:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 38
        -: 1321:	{
    #####: 1322:	  state->coins += 2;
        -: 1323:	}
       38: 1324:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 38
        -: 1325:	{
    #####: 1326:	  state->coins += 3;
        -: 1327:	}	
        -: 1328:    }	
        -: 1329:
        -: 1330:  //add bonus
       45: 1331:  state->coins += bonus;
        -: 1332:
       45: 1333:  return 0;
        -: 1334:}
        -: 1335:
        -: 1336:/*****************************************************************************/
        -: 1337:/*                    Refactored functions added here                        */
        -: 1338:/*****************************************************************************/
        -: 1339:
function playVillage called 0 returned 0% blocks executed 0%
    #####: 1340:int playVillage(struct gameState *state, int currentPlayer, int handPos){
        -: 1341:
        -: 1342:    //+1 Card
    #####: 1343:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1344:			
        -: 1345:    //+2 Actions
    #####: 1346:    state->numActions = state->numActions + 2;
        -: 1347:			
        -: 1348:    //discard played card from hand
    #####: 1349:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1350:    return 0;
        -: 1351:}
        -: 1352:
function playCutpurse called 5 returned 100% blocks executed 53%
        5: 1353:int playCutpurse(struct gameState *state, int currentPlayer, int handPos){
        -: 1354:    
        -: 1355:    int i;
        -: 1356:    int j;
        -: 1357:    int k;
        -: 1358:
        5: 1359:    updateCoins(currentPlayer, state, 2);
call    0 returned 5
        -: 1360:    
       15: 1361:    for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 10
branch  1 taken 5 (fallthrough)
       10: 1362:	    if (i != currentPlayer) {
branch  0 taken 5 (fallthrough)
branch  1 taken 5
        5: 1363:            for (j = 0; j < state->handCount[i]; j++) {
branch  0 taken 0
branch  1 taken 5 (fallthrough)
    #####: 1364:                if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1365:                    discardCard(j, i, state, 0);
call    0 never executed
    #####: 1366:                    break;
        -: 1367:                }
    #####: 1368:                if (j == state->handCount[j]) { /*BUG INTRODUCED HERE THAT CHANGES i TO j | This should change the hand counter to look at the incorrect array parameters*/
branch  0 never executed
branch  1 never executed
    #####: 1369:                    for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1370:                        if (DEBUG) {
        -: 1371:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1372:                        }
        -: 1373:                    }	
    #####: 1374:                break;
        -: 1375:                }		
        -: 1376:            }		
        -: 1377:	    }		
        -: 1378:	}				
        -: 1379:
        -: 1380:    //discard played card from hand
        5: 1381:    discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 5
        5: 1382:    return 0;
        -: 1383:}
        -: 1384:
function playBaron called 0 returned 0% blocks executed 0%
    #####: 1385:int playBaron(struct gameState *state, int currentPlayer, int choice1){
        -: 1386:
    #####: 1387:    state->numBuys++;//Increase buys by 1!
    #####: 1388:    if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1389:	    int p = 0;//Iterator for hand!
    #####: 1390:	    int card_not_discarded = 1;//Flag for discard set!
        -: 1391:	
    #####: 1392:        while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1393:	        if (state->hand[currentPlayer][p] == estate){//Found an estate card! 
branch  0 never executed
branch  1 never executed
    #####: 1394:	            state->coins = 4;//Add 4 coins to the amount of coins /*BUG INTRODUCED HERE THAT CHANGES += TO = | This should reset the player coin count to 4 instead of adding 4*/
    #####: 1395:	            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1396:	            state->discardCount[currentPlayer]++;
    #####: 1397:	        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1398:	            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1399:	        }
        -: 1400:	        
    #####: 1401:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1402:	        state->handCount[currentPlayer]--;
    #####: 1403:	        card_not_discarded = 0;//Exit the loop
        -: 1404:	        }
        -: 1405:	  
    #####: 1406:            else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1407:                if(DEBUG) {
        -: 1408:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1409:                    printf("Must gain an estate if there are any\n");
        -: 1410:                }
    #####: 1411:                if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1412:                    gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1413:                    state->supplyCount[estate]--;//Decrement estates
        -: 1414:
    #####: 1415:                    if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1416:                        isGameOver(state);
call    0 never executed
        -: 1417:                    }
        -: 1418:                }
    #####: 1419:                card_not_discarded = 0;//Exit the loop
        -: 1420:            }
        -: 1421:                    
        -: 1422:            else{
    #####: 1423:                p++;//Next card
        -: 1424:            }
        -: 1425:	    }
        -: 1426:    }
        -: 1427:			    
        -: 1428:    else{
    #####: 1429:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1430:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1431:	        state->supplyCount[estate]--;//Decrement Estates
        -: 1432:	        
    #####: 1433:            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1434:	            isGameOver(state);
call    0 never executed
        -: 1435:	        }
        -: 1436:	    }
        -: 1437:    }
    #####: 1438:    return 0;
        -: 1439:}
        -: 1440:
function playSmithy called 5 returned 100% blocks executed 71%
        5: 1441:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1442:
        -: 1443:    int i;
        -: 1444:
        -: 1445:    //+3 Cards
        5: 1446:    for (i = 0; i > 3; i++) { /*BUG INTRODUCED HERE THAT CHANGES < TO > | This should prevent the player from ever drawing cards, but skip the loop and exit the playSmithy function properly*/
branch  0 taken 0
branch  1 taken 5 (fallthrough)
    #####: 1447:	    drawCard(currentPlayer, state);
call    0 never executed
        -: 1448:	  }
        -: 1449:			
        -: 1450:    //discard card from hand
        5: 1451:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 5
        5: 1452:    return 0;
        -: 1453:}
        -: 1454:
function playAdventurer called 5 returned 100% blocks executed 93%
        5: 1455:int playAdventurer(struct gameState *state, int currentPlayer, int *temphand, int z){
        -: 1456:
        -: 1457:     // draw from player dect one card at a time until 2 treasure cards are revealed
        -: 1458:     // once two treasure cards are revealed, add them to the player hand and discard all other cards
        -: 1459:
        5: 1460:    int drawntreasure = 0;
        -: 1461:    int cardDrawn;
        -: 1462:
        -: 1463:    // // discard played card from hand
        -: 1464:    // discardCard(state->handCount, currentPlayer, state, 0);
        -: 1465:
       26: 1466:    while(drawntreasure<2){
branch  0 taken 16
branch  1 taken 5 (fallthrough)
        -: 1467:
        -: 1468:        //if the deck is empty we need to shuffle discard and add to deck
       16: 1469:	    if (state->deckCount[currentPlayer] <1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####: 1470:	      shuffle(currentPlayer, state);
call    0 never executed
        -: 1471:	    }
        -: 1472:	
        -: 1473:      // draw card and add to hand
       16: 1474:      drawCard(currentPlayer, state);
call    0 returned 16
       16: 1475:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1476:	
        -: 1477:      // if the card is a treasure, keep it
       16: 1478:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 6 (fallthrough)
branch  1 taken 10
branch  2 taken 6 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 6
       10: 1479:	      drawntreasure++;
        -: 1480:
        -: 1481:        // otherwise, remove the card
        -: 1482:	    else{
        6: 1483:	      temphand[z]=cardDrawn;
        6: 1484:	      state->handCount[currentPlayer]--;
        6: 1485:	      z++;
        -: 1486:	    }
        -: 1487:    }
        -: 1488:    
        -: 1489:    // discard all cards in play that have been drawn
       12: 1490:    while(z-1>0){ /*BUG INTRODUCED HERE THAT CHANGES >= TO > | This should leave a card in the player's hand that should have been discarded*/
branch  0 taken 2
branch  1 taken 5 (fallthrough)
        2: 1491:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
        2: 1492:	    z=z-1;
        -: 1493:    }
        -: 1494:    
        5: 1495:    return 0;
        -: 1496:}
        -: 1497:
        -: 1498:
        -: 1499://end of dominion.c
        -: 1500:
